---
layout: post
title: Ruby Conference Video   Coding for Failure
---

I finished watching the video "Coding for Failure":http://rubyconf2008.confreaks.com/coding-for-failure.html presetend by Tameer Salah at RubyConf 2008.

Here are my notes from this presentation.

h2. Handling exceptions

<pre>
x = foo.bar rescue nil
</pre>

Above code will rescue only the StandardErrors. Be aware of that. Same is true for this code.

<pre>
begin
  require 'Foobar'
rescue
end
</pre>


If you want to rescue all exceptions ( not a good idea) then rescue Exception like this.

<pre>
begin
 require 'Foobar'
rescue Exception => e
end
</pre>

h2. In cron job use &&

<pre>
# cron job command
cd directory; rm -rf
</pre>

The above cron job command is risky. Even if the cd to directory fails the next command of deleting all the stuff will be executed. Not good. A better solution is

<pre>
cd directory && rm -rf
</pre>

In the above cron job command because of <code>&&</code> if the cd to directory fails then the next operation will not be executed.



h2. Always check response code after *nix command

Anytime any *nix command is executed either through system command or backtick check for response code.

<pre>
files = `cd /etc && ls`
unless $?.success?
  fail "command failed: #{$?}"
end
</pre>


h2. Fail loud

Not only fail fast but also fail loud.

<pre>
users.each do |user|
 user.activated = true
 user.save
end
</pre>

In the above code if the user.save fails for say some validation reason then no feedback is sent back. This is not good. A better solution would be to save loud.

<pre>
users.each do |user|
 user.activated = true
 user.save! # failing loud
end
</pre>

h2. Manage Exceptions when sending out emails

<pre>
SERVER_EXCEPTIONS = [
                    TimeoutError,
                    IOError,
                    Net::SMTPUnknownError,
                    Net::SMTPServerBusy,
                    Net::SMTPAuthenticationError  
                    ]
                    
CLIENT_EXCEPTIONS = [
                    Net::SMTPFatalError,
                    Net::SMTPSyntaxError
                    ]                   
                    
EXCEPTIONS = SERVER_EXCEPTIONS + CLIENT_EXCEPTIONS


# sending out email in real time
begin
  Mailer.deliver_message
rescue *CLIENT_EXCEPTIONS
  flash[:error] = 'The email address supplied is invalid.'
  redirect_to ...
rescue *SEVER_EXCEPTIONS
  flash[:error] = 'We encountered an internal issue while attempting to deliver this email. Please try again in a few minutes'
  redirect_to ..
end

# in a rake task
begin
  Mailer.deliver_message
rescue *EXCEPTIONS => e
  notify_hoptoad(e)
end                       
</pre>


