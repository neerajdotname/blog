---
layout: post
title: Why the id of nil is 4 in Ruby
---
While developing rails application you have must seen this 

{% highlight sh %}
Called id for nil, which would mistakenly be 4 â€” if you really 
wanted the id of nil, use object_id
{% endhighlight %}

We all know that this message is added by Rails and it is called 'whiny nil'.  If you open your config/development.rb file you will see 

{% highlight ruby %}
# Log error messages when you accidentally call methods on nil.
config.whiny_nils = true
{% endhighlight %}

Simply stated it means if the application happens to invoke id on nil object then throw an error. Because Rails assumes that most likely that was not the intention of the author.

The question I have is why 4. Why did Matz choose the id of nil to be 4. I did not really put any effort in getting the answer to that question. And then I watched "this awesome presentation":http://mtnwestrubyconf2008.confreaks.com/11farley.html on 'Ruby Internals'.  And I got the answer.

In short Matz decided to have all the odd numbers reserved for numerical values. Check this out.

{% highlight ruby %}
> irb
>> 0.id
(irb):1: warning: Object#id will be deprecated; use Object#object_id
=> 1
>> 1.id
(irb):2: warning: Object#id will be deprecated; use Object#object_id
=> 3
>> 2.id
(irb):3: warning: Object#id will be deprecated; use Object#object_id
=> 5
>> 3.id
(irb):4: warning: Object#id will be deprecated; use Object#object_id
=> 7
{% endhighlight %}

Id 1,3,5 and 7 are taken by 0,1,2 and 3.

Now we are left with the id 0,2,4 and higher values.


{% highlight ruby %}
> irb
> FALSE.id
(irb):5: warning: Object#id will be deprecated; use Object#object_id
=> 0
>> TRUE.id
(irb):6: warning: Object#id will be deprecated; use Object#object_id
=> 2
{% endhighlight %}

FALSE had the id 0 and TRUE has the id 2.

Now the next available id left is 4 and that is what taken by NIL.


{% highlight ruby %}
> irb
>> NIL.id
(irb):7: warning: Object#id will be deprecated; use Object#object_id
=> 4
{% endhighlight %}

We won't even be discussing this issue once 1.9 comes out where we will have to use object_id and then this won't be an issue.
