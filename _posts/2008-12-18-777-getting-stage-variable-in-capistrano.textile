---
layout: post
title: Getting stage variable in capistrano
---
I use "capistrano multistage":http://weblog.jamisbuck.org/2007/7/23/capistrano-multistage in all of my applications. A typical deploy.rb file might look like this.

{% highlight ruby %}
set :stages, %w(production)
require 'capistrano/ext/multistage'
server "67.207.xxx.xx", :app, :web, :db, :primary => true

set :application, "myblog"

set :repository,  "."
set :user, 'neeraj'
set :deploy_to, "/home/#{user}/apps/#{application}"
set :use_sudo, false
set :scm, :git
set :deploy_via, :copy
set :copy_remote_dir, "/home/#{user}/tmp"
{% endhighlight %}

This is all good. Problem arises if we want to change the application name from "myblog" to "myblog_production" or "myblog_staging". On the linux server is it much easier to distinguish between staging and production environments if the full path to application is /home/neeraj/apps/eii_staging/current or /home/neeraj/apps/eii_production/current. 

In order to have dynamic name of the application one might be tempted to do this.

{% highlight ruby %}
# I am only mentioning the line that is being change
set :application, "myblog_#{stage}"
{% endhighlight %}

But this will not work. Capistrano will complain that variable 'stage' is not found. In order to fix the problem revise the above code to

{% highlight ruby %}
# lazily evaluate stage
set(:application) { "myblog_#{stage}" }
{% endhighlight %}

Now the code should work fine. With that revision the full code might look like this.

{% highlight ruby %}
set :stages, %w(production)
require 'capistrano/ext/multistage'
server "67.207.xxx.xx", :app, :web, :db, :primary => true

set(:application) { "myblog_#{stage}" }

set :repository,  "."
set :user, 'neeraj'
set :deploy_to, "/home/#{user}/apps/#{application}"
set :use_sudo, false
set :scm, :git
set :deploy_via, :copy
set :copy_remote_dir, "/home/#{user}/tmp"
{% endhighlight %}

Capistrano will fail again because we are using variable 'application' in setting variable 'deploy_to'. But when the value of variable 'deploy_to' is evaluated application is not yet set by that time and hence the error.

Since variable 'application' is lazily evaluated, all variables that depend on 'application' needs to be lazily evaluated and this will cause the cascading effect turning assignment to a lot of variables to be lazily evaluated.

The final fixed version looks like this

{% highlight ruby %}
set :stages, %w(production)
require 'capistrano/ext/multistage'
server "67.207.xxx.xx", :app, :web, :db, :primary => true

set(:application) { "myblog_#{stage}" }

set :repository,  "."
set :user, 'neeraj'
set (:deploy_to) { "/home/#{user}/apps/#{application}" }

set :use_sudo, false
set :scm, :git
set :deploy_via, :copy
set :copy_remote_dir, "/home/#{user}/tmp"
{% endhighlight %}
 <br />
