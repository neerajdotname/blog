---
layout: post
title: Ruby doesn't believe in class methods
---

Yes in the ruby world all the class methods are equivalent to the instance methods of the metaclass.

If you look at the ruby documentation for Module, you will find that we have methods like

instance_methods 
private_instance_methods  
protected_instance_methods

but we do not have their counterparts. We do not have methods like

<pre>
class_methods
private_class_methods
protected_class_methods
</pre>

It is not very difficult for Matz to implement these class methods. The reason why these methods are not there is ,in my opinion, because as "Dave Thomas":http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming says there is nothing like class methods. All methods are instance methods. A class method is nothing else but instance method for the metaclass. Check this out.

<pre>
# get the list of all instance methods
class Person
  def foo
    puts 'foo'
  end
  def self.bar
    puts 'bar'
  end
end

puts Person.instance_methods(false) #=> foo
puts Person.public_instance_methods(false) #=> foo
</pre>

To get the list of all class methods we could do something like this

<pre>
# get the list of all class methods
class Object
  def self.metaclass 
    class << self
      self
    end
  end
end
    
class Person
  def foo
    puts 'foo'
  end
  def self.bar
    puts 'bar'
  end
end

puts Person.metaclass.instance_methods(false)

#output is:
#metaclass
#allocate
#bar
#superclass
#new
</pre>

We know that class methods are nothing but instance methods on the metaclass so we walked upto the metaclass and asked for all the instance methods.

We got method 'bar'.However  we also got 5 additional methods. These five methods are also available in all the metaclasses as instance methods. To cleanup the lise we can do this.

<pre>
class Object
  def self.metaclass 
    class << self
      self
    end
  end
end
class Person
  def foo
    puts 'foo'
  end
  def self.bar
    puts 'bar'
  end
end

puts Person.metaclass.instance_methods(false) - String.metaclass.instance_methods(false) 
#=> bar
</pre>
