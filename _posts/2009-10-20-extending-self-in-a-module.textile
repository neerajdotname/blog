---
layout: post
title: extending self in a module
---
What does this code do.

<pre>
module Say
 extend self
end
</pre>

One of the characteristics of module is that you can't make an instance of it. This will fail.

<pre>
Say.new
</pre>

However you can invoke a method on a module. 

<pre>
module Say
  def self.drink
    puts 'drinking'
  end
end
Say.drink
</pre>

You can't invoke an instance method of a module from a module. This will not work.

<pre>
module Say
  def bark
    puts 'barking'
  end
end
Say.bark #=> undefined method ‘bark’ for Say:Module
</pre>

However using extend self, method bark can be made available to module Say.

<pre>
module Say
  def bark
    puts 'barking'
  end
  extend self
end
Say.bark #=> 'barking'
</pre>

Statement <tt>extend self</tt> is an executable statement. When module is being loaded then self if the moduel itself. So that's like saying <tt>extend Say</tt>. And that's what happens. When a module extends another module then first module gets to invoke all the instance methods of the other module. That's how in this case Say module is able to invoke method <tt>bar</tt> .<br />
