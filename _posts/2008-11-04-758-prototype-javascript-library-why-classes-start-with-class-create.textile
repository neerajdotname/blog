---
layout: post
title: Prototype javascript library - why classes start with Class.create()
---
Developers learn Java, PHP, Ruby etc but not javascript. Javascript is something that is picked up along the way. Since most of the programming languages are Object oriented languages, newbies assume that Javascript also has Class, which can be used to create new instances of that class. That is not true.

Javascript does not have the notion of a class which can be used to create new instances. Atleast Javascript natively does not suppport it.

If you have been using "prototype":http://prototypejs.org/ , Javascript framework library, then you might have seen code like this.

{% highlight js %}
var Person = Class.create();
Person.prototype = {
  initialize: function(name) {
    this.name = name;
  },
  say: function(message) {
    return this.name + ': ' + message;
  }
};
{% endhighlight %}

When I first looked at this code I wondered why there is a single call Class.create(). In this blog I am going to expand on that.

Let's look at a simple javascript code that creates an instance of User.

{% highlight js %}
function User(name,email,birth_date) {
  this.name = name;
  this.email = email;
  this.birth_date = new Date(birth_date);
  this.getAge = function() { 
     new_date = new Date;
     diff = new_date - this.birth_date;
     age_in_years = diff/(1000*60*60*24*365);
     return age_in_years + ' years';
  }
}

john = new User('John','john@example.org','11/11/1980');

alert (john.getAge());
{% endhighlight %}

Above code works. However it will create a new instance of anonymous function for getAge for every single instance of User and that will consume too much memory.  The code could be refactored to

{% highlight js %}
function User(name,email,birth_date) {
  this.name = name;
  this.email = email;
  this.birth_date = new Date(birth_date);
}

User.prototype.getAge = function() { 
     new_date = new Date;
     diff = new_date - this.birth_date;
     age_in_years = diff/(1000*60*60*24*365);
     return age_in_years + ' years';
 }

john = new User('John','john@example.org','11/11/1980');

alert (john.getAge());
{% endhighlight %}

Above approach will consume a lot less memory. In the above code prototype method has been used. If you are not familiar with this then you can read more about prototype "here":http://www.javascriptkit.com/javatutors/proto.shtml

However there is a problem. Now the initialization code for User is split at two different places: one in construction and one with protoype.

Prototype library has solved that problem by creating a function called Class. The code can be refactored to

{% highlight js %}
var User = Class.create();
User.prototype = {
  initialize: function(name,email,birth_date) {
  this.name = name;
  this.email = email;
  this.birth_date = new Date(birth_date);
  },
getAge: function() { 
     new_date = new Date;
     diff = new_date - this.birth_date;
     age_in_years = diff/(1000*60*60*24*365);
     return age_in_years + ' years';
 }
};

john = new User('John','john@example.org','11/11/1980');

alert (john.getAge());
{% endhighlight %}

In the above code all the initialization work has been kept at one single place and that is what using Class.create() buys us.

In prototype 6.0 a few more goodies have been added to Class.Create. You can read about them "here":http://prototypejs.org/learn/class-inheritance


 <br />
