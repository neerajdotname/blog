---
layout: post
title: Saving has many association children after modifying the children
---
<pre>
class Article < ActiveRecord::Base
  has_many :comments,:dependent => :destroy
  validates_presence_of :title,:body
end

class Comment < ActiveRecord::Base
  belongs_to :article
  validates_presence_of :author_name, :body
end

>>>article = Article.new(:title => 'how to discussion',:body => 'tbd')
>> article.comments << Comment.new(:author_name => 'John', :body => 'tbd')
>> article.comments << Comment.new(:author_name => 'John2', :body => 'tbd')
>> article.save

INSERT INTO `articles` (`status`, `body_html`, `updated_at`, `title`, `body`, `created_at`) 
VALUES('draft', '<p>tbd</p>', '2008-11-17 20:14:22', 'how to discussion', 'tbd', '2008-11-17 20:14:22')

INSERT INTO `comments` (`body_html`, `updated_at`, `body`, `author_name`, `author_website`, `article_id`, `author_email`, `created_at`) 
VALUES('<p>tbd</p>', '2008-11-17 20:14:22', 'tbd', 'John', NULL, 761, NULL, '2008-11-17 20:14:22')

INSERT INTO `comments` (`body_html`, `updated_at`, `body`, `author_name`, `author_website`, `article_id`, `author_email`, `created_at`) 
VALUES('<p>tbd</p>', '2008-11-17 20:14:22', 'tbd', 'John2', NULL, 761, NULL, '2008-11-17 20:14:22')

</pre>

Two comments have been saved by adding to article.

Now let's try modifying the comments.


<pre>
>> comments = article.comments
>> comment1 = comments[0]
>> comment2 = comments[1]

>> comment1.author_name = 'foo1'
>> comment2.author_name = 'foo2'
</pre>

comment1 and comment2 are not ready to be saved. We can save each object individually like this.

<pre>
>> comment1.save
>> comment2.save
</pre>
 
or we can save both the objects in one single swoop.

<pre>
article.comments << [comment1,comment2]

UPDATE `comments` SET `author_name` = 'foo1', `updated_at` = '2008-11-17 20:17:33' WHERE `id` = 326
UPDATE `comments` SET `author_name` = 'foo2', `updated_at` = '2008-11-17 20:17:33' WHERE `id` = 327
</pre>
 <br />
