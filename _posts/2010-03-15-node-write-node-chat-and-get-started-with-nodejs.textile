---
layout: post
title: Write node-chat and get started with nodejs
published: false
---

<pre>
PORT = 8002;
HOST = '127.0.0.1';

var sys = require('sys'),
http = require('http'),
server,
listen;

server = http.createServer(function(req, res) {
	res.writeHead(200, {
		'Content-Type': 'text/plain'
	});
	res.write('Hello World');
	res.close();
});

server.listen(PORT, HOST);
sys.puts("Server at http://" + HOST + ':' + PORT.toString() + '/');
</pre>

We need to have an index page where user will be asked to input nick name.

<pre>
PORT = 8002;
HOST = '127.0.0.1';

var sys = require('sys'),
http = require('http'),
fs = require('fs'),
readfile = fs.readFile,
server,
listen,
filename = 'index.html';

server = http.createServer(function(req, res) {
	readfile(filename, function(err, data) {
		if (err) {
			sys.puts('Error loading file ' + filename);
		} else {
			sys.puts('Loading file ' + filename);
		}

		res.writeHead(200, {
			'Content-Type': 'text/html',
			'Content-Length': data.length
		});

		res.write(data);
		res.close();
	});
});

server.listen(PORT, HOST);
sys.puts("Server at http://" + HOST + ':' + PORT.toString() + '/');
</pre>

Html page 

<pre>
<html>
  <head>
  </head>

  <body>
    <div id="app"> 
      <div id="connect"> 
        <form action="#"> 
          <fieldset> 
            <p> 
              This is a chat room. Both the client-side and server-side are
              written in javascript. The source code is
              <a href="http://github.com/neerajdotname/node_chat">here</a>.
            </p> 
            <label for="nick">Name</label> 
            <input id="nickInput" class="text"type="text" name="nick" value=""/> 
            <input id="connectButton" class="button" type="submit" name="" value="Join"/> 
          </fieldset> 
        </form> 
      </div>
    </div>
  </body>

</html>
</pre>


h2. Step 3

When the user hits subit after entering nickname then it should be an AJAX request. jQuery is a popular JavaScript libarary and we are going to use it. All the JavaScript code will reside in client.js .

<pre>
$('#connectButton').live('click', function() {
	var nick = $('#nickInput').attr('value');

	if (nick.length > 50) {
		alert('nick too long. 50 characters max');
		return false;
	}

	if (/[^\w-]/.test(nick)) {
		alert('Bad character found. Only letters, numbers, _ and - are allowed');
		return false;
	}

	$.ajax({
		cache: false,
		type: 'GET',
		dataType: 'json',
		url: '/join',
		data: {
			nick: nick
		},
		error: function() {
			alert('error connecting to server');
		},
		success: function() {}
	});

	return false;

});
</pre>

h2. Handling client.js

As of now server is only capable of serving index.html . That needs to be changed so that client.js could also be served. Rather than making server.js too big, a helper file utils.js will be introduced.

<pre>
var sys = require('sys');
var fs = require('fs');

var readfile = fs.readFile;

var util = exports;
util.getMap = [];

util.get = function(path, handler) {
	util.getMap[path] = handler;
};

util.staticHandler = function(filename) {
	var body;

	function loadResponseData(callback) {
		sys.debug('going to load file ' + filename);
		readfile(filename, function(err, data) {
			if (err) {
				sys.debug('Error loading file ' + filename);
			} else {
				sys.debug(' actually Loading file ' + filename);
				body = data;
				sys.debug('>> body.length is ' + body.length);
			}
			callback();
		});

	}

	return function(req, res) {
		loadResponseData(function() {
			res.writeHead(200, {
				'Content-Type': 'text/html',
				'Content-Length': body.length
			});
			res.write(body);
			res.close();
		});

	};

};

util.get('/', util.staticHandler('index.html'));
util.get('/client.js', util.staticHandler('client.js'));
</pre>

<pre>
//server.js
PORT = 8002;
HOST = '127.0.0.1';

var sys = require('sys'),
http = require('http'),
url = require('url'),
util = require('./util'),
server,
listen,
filename = 'index.html',
NOT_FOUND = 'Not Found \n';

var not_found = function(req, res) {
	res.sendHeader(404, [['Content-Type', 'text/plain'], ['Content-Length', NOT_FOUND.length]]);
	res.write(NOT_FOUND);
	res.close();
};

server = http.createServer(function(req, res) {
	var handler = util.getMap[url.parse(req.url).pathname] || not_found;
	handler(req, res);
});

server.listen(PORT, HOST);
sys.puts("Server at http://" + HOST + ':' + PORT.toString() + '/');
</pre>
