---
layout: post
title: rake db migrate reset VS rake db reset
---
In Rails *rake db:migrate:reset* and *rake db:reset* is not the same. Thanks to "this change set":http://dev.rubyonrails.org/changeset/8123

Let's look at the source code:

railties/lib/tasks/databases.rake

<pre>
  namespace :migrate do
    desc 'Resets your database using your migrations for the current environment'
    task :reset => ["db:drop", "db:create", "db:migrate"]
  end

  desc 'Drops and recreates the database from db/schema.rb for the current environment.'
  task :reset => ['db:drop', 'db:create', 'db:schema:load']
</pre>

As the code suggests rake db:migrate:reset will drop and will create the database. But after that rails will execute rake db:migrate to build up the tables. This could be tricky since running rake db:migrate after a long time could be a little unstable.

Hence DHH provided an option by creating rake db:reset. This will drop the database and will create the database. After that it will execute rake db:schema:load to create the tables.

It means that if you are not checking in schema.info in the repository then you should.

One more thing worth noting is that rake db:schema:load has limitations. It will not preserve collations, character sets and other database specific features. However one can have all the information in schema.info in sql format instead of having it in ruby format. To accomplish that use the following option in environment.rb

<pre>
# config.active_record.schema_format = :sql
</pre>
