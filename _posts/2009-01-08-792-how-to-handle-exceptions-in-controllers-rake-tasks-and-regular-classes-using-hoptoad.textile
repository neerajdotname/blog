---
layout: post
title: How to handle exceptions in controllers, rake tasks and regular classes using Hoptoad
---
When things go wrong , we want to be notified of the problem. "Exception Notifier Plugin":http://agilewebdevelopment.com/plugins/exception_notifier is a good solution. However "Hoptoad":http://hoptoadapp.com/welcome is the new kid on the block. Hoptoad  is free, useful and easy to setup.

h2. Basics of Exception

Since we are talking about managing exceptions. First let's go through the basics of exceptions in ruby. "Here is the list":http://gist.github.com/44757 of ruby exceptions.

Usually we handle exceptions like this.

{% highlight ruby %}
begin
  #...
rescue => e
  puts e
end
{% endhighlight %}

Please note that in the above case only StandardError is caught. Rest of the exceptions are not caught in the above code. For example check this out.

{% highlight ruby %}
begin
  require 'abcd'
rescue => e
  puts "ERROR:" + e
end
{% endhighlight %}

If you execute the above code then you will see <tt>LoadError: no such file to load â€” abcd</tt> and rescue does not 
capture the exception. That is because when <tt>require 'abcd'</tt> fails, ruby throws LoadError exception. LoadError
is not a subclass of StandardError. In order to solve the above problem a solution could be 

{% highlight ruby %}
begin
  require 'abcd'
rescue LoadError => e
  puts "ERROR:" + e
end
{% endhighlight %}

So remember if you are not specifying the type of exception you want to handle then ruby , by default, will rescue only StandardError . And if you want to capture all exceptions then the rescue the base exception class itself like this and this will ensure that no matter what type of exception it is, all will be rescued.

{% highlight ruby %}
begin
 # ..
rescue Exception => e
 # no exception can escape now
end
{% endhighlight %}


h2. Handle exceptions in controllers with Hoptoad

"Hoptoad":http://hoptoadapp.com is a great utility for managing exceptions. However the documentation is a bit lacking. Follow the "README from github":http://github.com/thoughtbot/hoptoad_notifier/tree/master to follow the instruction on how to install hoptoad for your application.

After you have added <tt>include HoptoadNotifier::Catcher</tt> in application.rb then hoptoad will start reporting exceptions via email. If you need to catch an exception inside a controller and if you want that exception to be reported then do this.

{% highlight ruby %}
rescue => e
  notify_hoptoad(e)
end
{% endhighlight %}

In this way exceptions occuring in controllers is taken care of. If something blows up in model or in views then ultimately the exception will come down to controller and hoptoad will report it.

h2. Handling exceptions in rake tasks

An exception that is raised in a rake task will not be caught by hoptoad unless you do something about it. A lot of people assume that they have added <tt>include HoptoadNotifier::Catcher</tt> in application.rb and that will take care of exceptions in rake tasks too. Not true.

A typical rake task for me looks like this.

{% highlight ruby %}
namespace :alert do
  task :run => :environment do
    TASK_ID = "alert:run"
    puts "#{TASK_ID} starting at #{Time.zone.now.to_s(:long_format)} ...."
    include HoptoadNotifier::Catcher        
    
    begin
      # do business processing
    rescue Exception => e
      notify_hoptoad e
      puts e
    end
    
  end
end
{% endhighlight %}

You will notice that in the case of rake tasks,rescue code is different.

{% highlight ruby %}
# in rake tasks
rescue Exception => e

# in controller
rescue => e 
or 
rescue ArgumentError => e
{% endhighlight %}

I mentioned earlier in the article that if I want to rescue all types of exceptions then I should rescue Exception class itself. If I use <tt>rescue => e </tt> or <tt>rescue ArgumentError => e</tt> then certain types of exceptions will never be caught in rake.

For example if there is a NoMemoryError in controller and if our code is <tt>rescue => e</tt> then this exception will be caught by <tt>rescue_action_in_public</tt> and this exception will be reported to hoptoad.

If we are using <tt>rescue => e</tt> in rake task then NoMemoryError will not be caught and the rake task will fail and hoptoad will never know about it. That's not good. That is why in rake tasks, I rescue all types of exceptions by rescuing the Exception class itself.

The above rake task is executed by the cron job. This is the cron entry.

{% highlight sh %}
10 05 * * * cd /home/neeraj/apps/blog_production/current && /usr/bin/rake alert:run  RAILS_ENV=production >> /home/neeraj/apps/blog_production/current/log/alert_run_cron.log
{% endhighlight %}

I create one log file per cron job. In the log file I put the rake task name and when the task started the execution. All exceptions are caught and are reported to hoptoad.

h2. Handling exceptions in regular class

In the lib directory I have some standard ruby classes which handles the business logic. Exceptions can occur there too. An example of a regular class is

{% highlight ruby %}
# lib/alert_util.rb
class AlertUtil
  def self.generate_alert_report
  end    
end
{% endhighlight %}

To handle any exception in this method, add a begin/rescue and in the rescue make a call to hoptoad to report the error.

{% highlight ruby %}
class AlertUtil

  def self.generate_alert_report
    begin
      # business processing
    rescue Exception => e
      puts e
      HoptoadNotifier.notify(:error_message => e)
    end
    
  end    
end
{% endhighlight %}

Notice that in this case I did not even have to include any hoptoad module. The necessary methods are already mixed in if you are using rails application and if you followed the procedure to setup exceptions handling for controllers. <br />
