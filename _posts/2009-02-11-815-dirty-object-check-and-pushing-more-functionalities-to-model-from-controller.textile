---
layout: post
title: Dirty object check and pushing more functionalities to model from controller
---
We have a simple User model where one of the columns is <tt>activation_status</tt> . This is a boolean column with default value of false.

The requirement is that whenever the activation_status changes to true then send out a welcome email.

An implementation of the solution might look like this

{% highlight ruby %}
# users_controller.rb

def activate
  @user = User.find(params[:id])
  if @user.update_attributes(:activation_status => true)
    @user.send_welcome_email
  end
end
{% endhighlight %}

Above solution works. 

However it is better to push as much business logic as possible to model. Here is an example where app might break. Suppose someone goes to script/console and changes the status of a person who is not getting the activation code for some reason.

{% highlight ruby %}
>> ruby script/console
> user = User.find(7)
> user.update_attributes(:activation_status => true)
{% endhighlight %}

In the above case the support person changed the status of the person but no welcome email was sent to the person.

A good solution would be to push the functionality to model. In the model before_save callback will send out a welcome email only if the status is changing to true from false or from nil.

{% highlight ruby %}
# user.rb
class User < ActiveRecord::Base
  
  before_save :send_welcome_email
  
  def send_welcome_email
    if self.activation_status && (self.activation_status_was.nil? || !self.activation_status_was)
      send_welcome_email
    end
  end
end

{% endhighlight %}

This is much better. Now it does not matter how the status is changed. Controller can change the status as well as script/console can change the status and the welcome email will be sent when the status change.

This also follows the policy of "Skinny Controller Fat Model":http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model . <br />
