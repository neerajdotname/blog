---
layout: post
title: Follow ruby idioms but don't go overboard; if statement analysis
---
As a programmer when we switch from one language to another we are expected to pick up the nuances of the new language. In that sense we should write ruby idiomatic code. For example.

This one not so good.

<pre>
if current_user.status == false
  # do something
end
</pre>

A better approach would be

<pre>
if !current_user.status
  # do something
end

# or if you are comfortable with unless

unless current_user.status
  # do something
end
</pre>

checkout this code.

<pre>
if count = current_user.pictures_count
  current_user.updated_attributes(:pictures_count => count + 1)
else
  current_user.updated_attributes(:pictures_count => 0)  
end
</pre>

It is a valid ruby code. But I highly recomment not to write like this. In the above case the author's assumption is that current_user.pictures_count migh return nil. And in that case else loop will be called. Also note that the variable count is being set with a value here.

Over the years of progamming when my brain sees 'if' then it expects a condition. In this case a variable 'count' is being assigned a value and then ruby looks at the value of 'count'. This could be a bit confusing at times.

I guess more readable code would be.

<pre>
count = current_user.pictures_count
if count
  current_user.updated_attributes(:pictures_count => count + 1)  
else
  current_user.updated_attributes(:pictures_count => 0)    
end
</pre> <br />
